AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  banktransfer-lambda-service
  Fully migrated to use AWS Secrets Manager (no Parameter Store dependency)

Globals:
  Function:
    Timeout: 30
    Tracing: Active
    LoggingConfig:
      LogFormat: JSON
    Environment:
      Variables:
        NODE_ENV: production
        AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - staging
      - prod
    Description: Deployment environment (dev, staging, or prod)

  DevSecretArn:
    Type: String
    Description: ARN of the AWS Secrets Manager secret for the dev environment

  StagingSecretArn:
    Type: String
    Description: ARN of the AWS Secrets Manager secret for the staging environment

  ProdSecretArn:
    Type: String
    Description: ARN of the AWS Secrets Manager secret for the prod environment

  TransferRequeryQueueArn:
    Type: String
    Description: ARN of the SQS queue for transfer requery

  SecurityGroupId:
    Type: String
    Description: Security Group ID for Lambda VPC

  SubnetIds:
    Type: CommaDelimitedList
    Description: Comma separated list of Subnet IDs for Lambda VPC

Mappings:
  EnvToSecretArn:
    dev:
      SecretArn: !Ref DevSecretArn
    staging:
      SecretArn: !Ref StagingSecretArn
    prod:
      SecretArn: !Ref ProdSecretArn

Resources:
  # Lambda function
  TransferRequeryFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: functions/transferRequery.handler
      Runtime: nodejs18.x
      Role: !GetAtt TransferRequeryFunctionRole.Arn
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !Ref TransferRequeryQueueArn
            BatchSize: 10
            MaximumBatchingWindowInSeconds: 5
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds: !Ref SubnetIds
      Environment:
        Variables:
          # General environment
          ENVIRONMENT: !Ref Environment
          SECRET_ARN: !FindInMap [EnvToSecretArn, !Ref Environment, SecretArn]

          # Reference values inside the Secrets Manager JSON
          WALLET_HMAC_KEY: !Sub "{{resolve:secretsmanager:${SECRET_ARN}:SecretString:WalletHmacKey}}"
          BASE_URL: !Sub "{{resolve:secretsmanager:${SECRET_ARN}:SecretString:BASEURL}}"
          TRANSFER_REQUERY_QUEUE_ARN: !Sub "{{resolve:secretsmanager:${SECRET_ARN}:SecretString:TransferRequeryQueueArn}}"
          TRANSFER_REQUERY_QUEUE_URL: !Sub "{{resolve:secretsmanager:${SECRET_ARN}:SecretString:TransferRequeryQueueUrl}}"
          SUBNET_ID: !Sub "{{resolve:secretsmanager:${SECRET_ARN}:SecretString:SubnetId}}"
          SECURITY_GROUP_ID: !Sub "{{resolve:secretsmanager:${SECRET_ARN}:SecretString:SecurityGroupId}}"
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt TransferRequeryDeadLetterQueue.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - functions/transferRequery.ts

  # Dead Letter Queue
  TransferRequeryDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${AWS::StackName}-transfer-requery-dlq-${Environment}"
      MessageRetentionPeriod: 1209600 # 14 days
      KmsMasterKeyId: alias/aws/sqs

  # IAM Role for Lambda
  TransferRequeryFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-transfer-requery-role-${Environment}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
      Policies:
        - PolicyName: LambdaBasicExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
        - PolicyName: SecretsManagerAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !FindInMap [EnvToSecretArn, !Ref Environment, SecretArn]
        - PolicyName: SQSAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                  - sqs:GetQueueAttributes
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                Resource: "*"

Outputs:
  TransferRequeryFunction:
    Description: Lambda function ARN
    Value: !GetAtt TransferRequeryFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-transfer-requery-function-arn-${Environment}"

  SelectedSecretArnOutput:
    Description: Selected secret ARN for environment
    Value: !FindInMap [EnvToSecretArn, !Ref Environment, SecretArn]
    Export:
      Name: !Sub "${AWS::StackName}-selected-secret-arn-${Environment}"
