AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  banktransfer-lambda-service
  Fully refactored to pull all config from AWS Secrets Manager

Globals:
  Function:
    Timeout: 5
    Tracing: Active
    LoggingConfig:
      LogFormat: JSON

Parameters:
  Environment:
    Type: String
    AllowedValues:
      - dev
      - staging
      - prod
    Description: Deployment environment

  SecretArn:
    Type: String
    Description: ARN of the environment-specific Secrets Manager secret

Resources:
  TransferRequeryFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: functions/transferRequery.handler
      Runtime: nodejs18.x
      Role: !GetAtt TransferRequeryFunctionRole.Arn
      Architectures:
        - x86_64
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !Sub "{{resolve:secretsmanager:${SecretArn}:SecretString:TransferRequeryQueueArn}}"
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          SECRET_ID: !Ref SecretArn
          BASEURL: !Sub "{{resolve:secretsmanager:${SecretArn}:SecretString:BASEURL}}"
          WalletHmacKey: !Sub "{{resolve:secretsmanager:${SecretArn}:SecretString:WalletHmacKey}}"
          TransferRequeryQueueUrl: !Sub "{{resolve:secretsmanager:${SecretArn}:SecretString:TransferRequeryQueueUrl}}"
      VpcConfig:
        SecurityGroupIds:
          - !Sub "{{resolve:secretsmanager:${SecretArn}:SecretString:SecurityGroupId}}"
        SubnetIds:
          - !Sub "{{resolve:secretsmanager:${SecretArn}:SecretString:SubnetId}}"
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - functions/transferRequery.ts

  TransferRequeryFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: LambdaBasicExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
        - PolicyName: LambdaVpcPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                Resource: "*"
        - PolicyName: SecretsManagerAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref SecretArn
        - PolicyName: SQSPermissionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !Sub "{{resolve:secretsmanager:${SecretArn}:SecretString:TransferRequeryQueueArn}}"

Outputs:
  TransferRequeryFunction:
    Description: TransferRequery Service
    Value: !GetAtt TransferRequeryFunction.Arn

  TransferRequeryFunctionRole:
    Description: IAM Role for the TransferRequery function
    Value: !GetAtt TransferRequeryFunctionRole.Arn
